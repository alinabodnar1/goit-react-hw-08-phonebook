{"version":3,"file":"static/js/862.51880edb.chunk.js","mappings":"mPACA,GAAgB,UAAY,oCAAoC,mBAAmB,2CAA2C,OAAS,kC,SCOxH,SAASA,EAAT,GAAwC,IAAZC,EAAW,EAAXA,QACnCC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACC,EAAA,EAAD,WACE,iBAAKC,UAAWC,EAAAA,UAAhB,WACE,SAACC,EAAA,EAAD,KACA,iBAAMF,UAAWC,EAAAA,KAAjB,SAA4BL,EAAQO,QACpC,iBAAMH,UAAWC,EAAAA,OAAjB,SAA8BL,EAAQQ,UACtC,gBAAKJ,UAAWC,EAAAA,oBAAhB,UACE,mBACEI,QAAQ,WACRC,KAAK,SACLN,UAAWC,EAAAA,OACXM,QAZW,kBAAMV,GAASW,EAAAA,EAAAA,IAAcZ,EAAQa,IAArC,EAQb,0BANKb,EAAQa,GAkBtB,C,cC3BYC,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SAAnB,EAIvBC,GAAkBC,EAAAA,EAAAA,IAC7B,CAN4B,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,KAAnB,EAGP,SAAAL,GAAK,OAAIA,EAAMM,MAAV,IAI/B,SAACL,EAAUK,GACT,OAAOL,EAASK,QAAO,SAAArB,GAAO,OAC5BA,EAAQO,KACLe,OAAOtB,EAAQQ,QACfe,cACAC,SAASH,EAAOE,cAAcE,OAJL,GAM/B,ICXY,SAASC,IACtB,IAAMV,GAAWW,EAAAA,EAAAA,IAAYT,GAE7B,OACE,wBACGF,EAASY,KAAI,SAAA5B,GAAO,OACnB,SAACD,EAAD,CAAmCC,QAASA,GAArBA,EAAQa,GADZ,KAK1B,C,cCdD,EAAuB,mBAAvB,EAAsD,wBAAtD,EAAiG,+BAAjG,EAAyI,qB,UCK1H,SAASgB,IACtB,IAAM5B,GAAWC,EAAAA,EAAAA,MAoBjB,OACE,kBAAME,UAAWC,EAAUyB,SAnBR,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,OACXC,EAAWF,EAAKG,SAAS7B,KAAK8B,MAC9BC,EAAaL,EAAKG,SAAS5B,OAAO6B,MACxC,GAAiB,KAAbF,GAAkC,KAAfG,EAQrB,OAPArC,GACEsC,EAAAA,EAAAA,IAAW,CACThC,KAAM4B,EACN3B,OAAQ8B,UAGZL,EAAKO,QAGPC,EAAAA,GAAAA,KAAW,2CACZ,EAGC,WACE,iBAAKrC,UAAWC,EAAhB,WACE,SAACqC,EAAA,EAAD,CACEC,WAAY,CACVC,QAAS,uGACTC,MACE,0IAEJhC,GAAG,iBACHiC,MAAM,OACNpC,KAAK,OACLH,KAAK,OACLwC,UAAQ,KAGV,SAACL,EAAA,EAAD,CACEC,WAAY,CACVC,QAAS,qDACTC,MACE,gGAEJhC,GAAG,iBACHiC,MAAM,mBACNpC,KAAK,SACLH,KAAK,SACLwC,UAAQ,QAGZ,gBAAK3C,UAAWC,EAAhB,UACE,mBAAQI,QAAQ,YAAYC,KAAK,SAASN,UAAWC,EAArD,4BAIF,SAAC,KAAD,CAAgB2C,UAAW,IAAMC,SAAS,eAG/C,CCxDc,SAASC,IACtB,IAAMjD,GAAWC,EAAAA,EAAAA,MACXe,GAAYU,EAAAA,EAAAA,IAAYb,GAM9B,OAJAqC,EAAAA,EAAAA,YAAU,WACRlD,GAASmD,EAAAA,EAAAA,MACV,GAAE,CAACnD,KAGF,iCACE,SAACoD,EAAA,EAAD,WACE,gDAEF,SAACxB,EAAD,KACA,yBAAMZ,GAAa,4BACnB,SAACS,EAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/ContactsListItem/ContactsListItem.module.css?e52b","components/ContactsListItem/ContactsListItem.jsx","redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsListItem_container__1IgRD\",\"button-container\":\"ContactsListItem_button-container__wsXvj\",\"button\":\"ContactsListItem_button__myBT4\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@mui/material/List';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport CheckIcon from '@mui/icons-material/Check';\nimport css from './ContactsListItem.module.css';\n\nexport default function ContactsListItem({ contact }) {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n  return (\n    <List key={contact.id}>\n      <div className={css.container}>\n        <CheckIcon />\n        <span className={css.name}>{contact.name}</span>\n        <span className={css.number}>{contact.number}</span>\n        <div className={css['button-container']}>\n          <button\n            variant=\"outlined\"\n            type=\"button\"\n            className={css.button}\n            onClick={handleDelete}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    </List>\n  );\n}\n\nContactsListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const visibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name\n        .concat(contact.number)\n        .toLowerCase()\n        .includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","import React from 'react';\nimport ContactsListItem from 'components/ContactsListItem/ContactsListItem';\nimport { useSelector } from 'react-redux';\nimport { visibleContacts } from 'redux/contacts/selectors';\n\nexport default function ContactsList() {\n  const contacts = useSelector(visibleContacts);\n\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <ContactsListItem key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"container\":\"Form_container__WXj-7\",\"button-container\":\"Form_button-container__xP3pA\",\"button\":\"Form_button__8NOIT\"};","import TextField from '@mui/material/TextField';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport css from './Form.module.css';\nimport { ToastContainer, toast } from 'react-toastify';\n\nexport default function Form() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    const formName = form.elements.name.value;\n    const formNumber = form.elements.number.value;\n    if (formName !== '' || formNumber !== '') {\n      dispatch(\n        addContact({\n          name: formName,\n          number: formNumber,\n        })\n      );\n      form.reset();\n      return;\n    }\n    toast.info(\"Contact can't be empty. Enter some text!\");\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <div className={css.container}>\n        <TextField\n          inputProps={{\n            pattern: \"^[a-zA-Z-яА-Я]+(([' -][a-zA-Z-яА-Я ])?[a-zA-Z-яА-Я]*)*$\",\n            title:\n              \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          }}\n          id=\"outlined-basic\"\n          label=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          required\n        />\n\n        <TextField\n          inputProps={{\n            pattern: '?{1,4}?[-.]??{1,3}??[-.]?{1,4}[-.]?{1,4}[-.]?{1,9}',\n            title:\n              'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n          }}\n          id=\"outlined-basic\"\n          label=\"Telephone number\"\n          type=\"number\"\n          name=\"number\"\n          required\n        />\n      </div>\n      <div className={css['button-container']}>\n        <button variant=\"contained\" type=\"submit\" className={css.button}>\n          Add contact\n        </button>\n      </div>\n      <ToastContainer autoClose={3000} position=\"top-left\" />\n    </form>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactsList  from '../components/ContactsList/ContactsList';\nimport  Form  from '../components/Form/Form';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Form />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["ContactsListItem","contact","dispatch","useDispatch","List","className","css","Check","name","number","variant","type","onClick","deleteContact","id","selectIsLoading","state","contacts","isLoading","visibleContacts","createSelector","items","filter","concat","toLowerCase","includes","trim","ContactsList","useSelector","map","Form","onSubmit","evt","preventDefault","form","target","formName","elements","value","formNumber","addContact","reset","toast","TextField","inputProps","pattern","title","label","required","autoClose","position","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}